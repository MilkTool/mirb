SpecTag:fails::The defined? keyword for literals returns 'self' for self
SpecTag:fails::The defined? keyword for literals returns 'nil' for nil
SpecTag:fails::The defined? keyword for literals returns 'true' for true
SpecTag:fails::The defined? keyword for literals returns 'false' for false
SpecTag:fails::The defined? keyword when called with a method name without a receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name without a receiver returns 'method' if the method is defined and private
SpecTag:fails::The defined? keyword when called with a method name without a receiver returns 'method' if the predicate method is defined and private
SpecTag:fails::The defined? keyword when called with a method name having a module as receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name having a local variable as receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name having a local variable as receiver calls #respond_to_missing?
SpecTag:fails::The defined? keyword when called with a method name having an instance variable as receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name having a global variable as receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name having a class variable as receiver returns 'method' if the method is defined
SpecTag:fails::The defined? keyword when called with a method name having a method call as a receiver returns nil if evaluating the receiver raises an exception
SpecTag:fails::The defined? keyword when called with a method name having a method call as a receiver returns nil if the method is not defined on the object the receiver returns
SpecTag:fails::The defined? keyword when called with a method name having a method call as a receiver returns 'method' if the method is defined on the object the receiver returns
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for assigning a local variable
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for assigning an instance variable
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for assigning a global variable
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for assigning a class variable
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for assigning multiple variables
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '%='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '/='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '-='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '+='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '*='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '|='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '&='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '^='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '~='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '<<='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '>>='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '||='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '&&='
SpecTag:fails::The defined? keyword for an expression returns 'assignment' for an expression with '**='
SpecTag:fails::The defined? keyword for an expression returns 'method' for an expression with '=='
SpecTag:fails::The defined? keyword for an expression returns 'method' for an expression with '!='
SpecTag:fails::The defined? keyword for an expression returns 'method' for an expression with '!~'
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a String
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Fixnum literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Bignum literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Float literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Range literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Regexp literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed an Array literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Hash literal
SpecTag:fails::The defined? keyword for an expression returns 'expression' when passed a Symbol literal
SpecTag:fails::The defined? keyword for an expression with logical connectives does not propagate an exception raised by a method in a 'not' expression
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '&&/and' and an unset global variable
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '&&/and' and an unset instance variable
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression '&&/and' regardless of its truth value
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '||/or' and an unset global variable
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '||/or' and an unset instance variable
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression '||/or' regardless of its truth value
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'method' for a 'not' expression with a method
SpecTag:fails::The defined? keyword for an expression with logical connectives calls a method in a 'not' expression and returns 'method'
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '&&/and' and an undefined method
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '&&/and' and an unset class variable
SpecTag:fails::The defined? keyword for an expression with logical connectives does not call a method in an '&&' expression and returns 'expression'
SpecTag:fails::The defined? keyword for an expression with logical connectives does not call a method in an 'and' expression and returns 'expression'
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '||/or' and an undefined method
SpecTag:fails::The defined? keyword for an expression with logical connectives returns 'expression' for an expression with '||/or' and an unset class variable
SpecTag:fails::The defined? keyword for an expression with logical connectives does not call a method in an '||' expression and returns 'expression'
SpecTag:fails::The defined? keyword for an expression with logical connectives does not call a method in an 'or' expression and returns 'expression'
SpecTag:fails::The defined? keyword for an expression with a dynamic String returns 'expression' when the String contains a literal
SpecTag:fails::The defined? keyword for an expression with a dynamic String returns 'expression' when the String contains a call to a defined method
SpecTag:fails::The defined? keyword for an expression with a dynamic String returns 'expression' when the String contains a call to an undefined method
SpecTag:fails::The defined? keyword for an expression with a dynamic String does not call the method in the String
SpecTag:fails::The defined? keyword for an expression with a dynamic Regexp returns 'expression' when the Regexp contains a literal
SpecTag:fails::The defined? keyword for an expression with a dynamic Regexp returns 'expression' when the Regexp contains a call to a defined method
SpecTag:fails::The defined? keyword for an expression with a dynamic Regexp returns 'expression' when the Regexp contains a call to an undefined method
SpecTag:fails::The defined? keyword for an expression with a dynamic Regexp does not call the method in the Regexp
SpecTag:fails::The defined? keyword for variables returns 'instance-variable' for an instance variable that has been assigned
SpecTag:fails::The defined? keyword for variables returns 'global-variable' for $!
SpecTag:fails::The defined? keyword for variables returns 'global-variable for $~
SpecTag:fails::The defined? keyword for variables returns 'global-variable' for a global variable that has been assigned
SpecTag:fails::The defined? keyword for variables returns 'class variable' when called with the name of a class variable
SpecTag:fails::The defined? keyword for variables when a String does not match a Regexp returns 'global-variable' for $~
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $~
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $&
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $`
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $'
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for $+
SpecTag:fails::The defined? keyword for variables when a String matches a Regexp returns 'global-variable' for the capture references
SpecTag:fails::The defined? keyword for variables when a Regexp does not match a String returns 'global-variable' for $~
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $~
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $&
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $`
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $'
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for $+
SpecTag:fails::The defined? keyword for variables when a Regexp matches a String returns 'global-variable' for the capture references
SpecTag:fails::The defined? keyword for a simple constant returns 'constant' when the constant is defined
SpecTag:fails::The defined? keyword for a simple constant does not call Object.const_missing if the constant is not defined
SpecTag:fails::The defined? keyword for a simple constant returns 'constant' for an included module
SpecTag:fails::The defined? keyword for a simple constant returns 'constant' for a constant defined in an included module
SpecTag:fails::The defined? keyword for a top-level constant returns 'constant' when passed the name of a top-level constant
SpecTag:fails::The defined? keyword for a top-level constant does not call Object.const_missing if the constant is not defined
SpecTag:fails::The defined? keyword for a scoped constant returns 'constant' when the scoped constant is defined
SpecTag:fails::The defined? keyword for a scoped constant does not call .const_missing if the constant is not defined
SpecTag:fails::The defined? keyword for a scoped constant return 'constant' if the scoped-scoped constant is defined
SpecTag:fails::The defined? keyword for a top-level scoped constant returns 'constant' when the scoped constant is defined
SpecTag:fails::The defined? keyword for a top-level scoped constant return 'constant' if the scoped-scoped constant is defined
SpecTag:fails::The defined? keyword for a self-send method call scoped constant returns 'constant' if the constant is defined in the scope of the method's value
SpecTag:fails::The defined? keyword for a self-send method call scoped constant returns 'constant' if all the constants in the scope chain are defined
SpecTag:fails::The defined? keyword for a receiver method call scoped constant returns 'constant' if the constant is defined in the scope of the method's value
SpecTag:fails::The defined? keyword for a receiver method call scoped constant returns 'constant' if all the constants in the scope chain are defined
SpecTag:fails::The defined? keyword for a module method call scoped constant returns 'constant' if the constant scoped by the method's value is defined
SpecTag:fails::The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the scope chain are defined
SpecTag:fails::The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the receiver are defined
SpecTag:fails::The defined? keyword for a module method call scoped constant returns 'constant' if all the constants in the receiver and scope chain are defined
SpecTag:fails::The defined? keyword for a variable scoped constant returns 'constant' if the constant is defined in the scope of the variable reference
SpecTag:fails::The defined? keyword for a self\003A\003A scoped constant returns 'constant' for a constant explicitly scoped to self\003A\003A when set
SpecTag:fails::The defined? keyword for a self\003A\003A scoped constant returns 'constant' for a constant explicitly scoped to self\003A\003A in subclass's metaclass
SpecTag:fails::The defined? keyword for yield returns 'yield' if a block is passed to a method not taking a block parameter
SpecTag:fails::The defined? keyword for yield returns 'yield' if a block is passed to a method taking a block parameter
SpecTag:fails::The defined? keyword for super for a method taking no arguments returns 'super' when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking no arguments returns 'super' from a block when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking no arguments returns 'super' from a #define_method when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking no arguments returns 'super' from a block in a #define_method when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking no arguments returns 'super' when the method exists in a supermodule
SpecTag:fails::The defined? keyword for super for a method taking arguments returns 'super' when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking arguments returns 'super' from a block when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking arguments returns 'super' from a #define_method when a superclass method exists
SpecTag:fails::The defined? keyword for super for a method taking arguments returns 'super' from a block in a #define_method when a superclass method exists
SpecTag:fails::The defined? keyword for super within an included module's method returns 'super' when a superclass method exists in the including hierarchy
