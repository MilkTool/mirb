#pragma once
#include "../globals.hpp"
#include "../runtime/runtime.hpp"
#include "allocator.hpp"

enum token_type {
	T_NONE,
	T_ADD,
	T_SUB,
	T_MUL,
	T_DIV,
	T_MOD,
	T_POWER,
	T_LEFT_SHIFT,
	T_RIGHT_SHIFT,
	T_LOGICAL_AND,
	T_LOGICAL_OR,
	T_BITWISE_XOR,
	T_AMPERSAND, // BITWISE_AND
	T_BITWISE_OR,
	T_ASSIGN_ADD,
	T_ASSIGN_SUB,
	T_ASSIGN_MUL,
	T_ASSIGN_DIV,
	T_ASSIGN_MOD,
	T_ASSIGN_POWER,
	T_ASSIGN_LEFT_SHIFT,
	T_ASSIGN_RIGHT_SHIFT,
	T_ASSIGN_BITWISE_XOR,
	T_ASSIGN_BITWISE_AND,
	T_ASSIGN_BITWISE_OR,
	T_ASSIGN_LOGICAL_AND,
	T_ASSIGN_LOGICAL_OR,
	T_BITWISE_NOT,
	T_LOGICAL_NOT,
	T_UNARY_ADD,
	T_UNARY_SUB,
	T_ASSIGN,
	T_EQUALITY,
	T_CASE_EQUALITY,
	T_NO_EQUALITY,
	T_MATCHES,
	T_NOT_MATCHES,
	T_GREATER,
	T_GREATER_OR_EQUAL,
	T_LESS,
	T_LESS_OR_EQUAL,
	T_QUESTION,
	T_DOT,
	T_COMMA,
	T_COLON,
	T_SCOPE,
	T_SEMICOLON,
	T_PARENT_OPEN,
	T_PARENT_CLOSE,
	T_SQUARE_OPEN,
	T_SQUARE_CLOSE,
	T_CURLY_OPEN,
	T_CURLY_CLOSE,
	T_STRING_START,
	T_STRING_CONTINUE,
	T_STRING,
	T_STRING_END,
	T_INTEGER,
	T_OCTAL,
	T_REAL,
	T_HEX,
	T_IVAR,
	T_IDENT,
	T_EXT_IDENT,
	T_LINE,
	T_EOF,

	// Keywords
	T_IF,
	T_UNLESS,
	T_ELSE,
	T_ELSIF,
	T_THEN,
	T_WHEN,
	T_CASE,
	T_BEGIN,
	T_ENSURE,
	T_RESCUE,
	T_CLASS,
	T_MODULE,
	T_DEF,
	T_SELF,
	T_DO,
	T_YIELD,
	T_RETURN,
	T_BREAK,
	T_NEXT,
	T_REDO,
	T_SUPER,
	T_TRUE,
	T_FALSE,
	T_NIL,
	T_NOT,
	T_AND,
	T_OR,
	T_END,
	T_TYPES
};


#define OP_TO_ASSIGN (T_ASSIGN_ADD - T_ADD)
#define OP_TO_UNARY (T_UNARY_ADD - T_ADD)
extern const char *token_type_names[];

