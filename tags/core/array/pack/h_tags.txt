SpecTag:fails::Array#pack with format 'H' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'H' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'H' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'H' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'H' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'H' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'H' encodes no bytes when passed zero as the count modifier
SpecTag:fails::Array#pack with format 'H' raises a TypeError if the object does not respond to #to_str
SpecTag:fails::Array#pack with format 'H' raises a TypeError if #to_str does not return a String
SpecTag:fails::Array#pack with format 'H' calls #to_str to convert an Object to a String
SpecTag:fails::Array#pack with format 'H' encodes the first character as the most significant nibble when passed no count modifier
SpecTag:fails::Array#pack with format 'H' implicitly has count equal to the string length when passed the '*' modifier
SpecTag:fails::Array#pack with format 'H' encodes count nibbles when passed a count modifier exceeding the string length
SpecTag:fails::Array#pack with format 'H' encodes the first character as the most significant nibble of a hex value
SpecTag:fails::Array#pack with format 'H' encodes the second character as the least significant nibble of a hex value
SpecTag:fails::Array#pack with format 'H' encodes the least significant nibble of a non alphanumeric character as the most significant nibble of the hex value
SpecTag:fails::Array#pack with format 'H' returns an ASCII-8BIT string
SpecTag:fails::Array#pack with format 'h' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'h' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'h' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'h' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'h' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'h' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'h' encodes no bytes when passed zero as the count modifier
SpecTag:fails::Array#pack with format 'h' raises a TypeError if the object does not respond to #to_str
SpecTag:fails::Array#pack with format 'h' raises a TypeError if #to_str does not return a String
SpecTag:fails::Array#pack with format 'h' calls #to_str to convert an Object to a String
SpecTag:fails::Array#pack with format 'h' encodes the first character as the least significant nibble when passed no count modifier
SpecTag:fails::Array#pack with format 'h' implicitly has count equal to the string length when passed the '*' modifier
SpecTag:fails::Array#pack with format 'h' encodes count nibbles when passed a count modifier exceeding the string length
SpecTag:fails::Array#pack with format 'h' encodes the first character as the least significant nibble of a hex value
SpecTag:fails::Array#pack with format 'h' encodes the second character as the most significant nibble of a hex value
SpecTag:fails::Array#pack with format 'h' encodes the least significant nibble of a non alphanumeric character as the least significant nibble of the hex value
SpecTag:fails::Array#pack with format 'h' returns an ASCII-8BIT string
