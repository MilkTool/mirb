SpecTag:fails::String#gsub with pattern and replacement respects $KCODE when the pattern collapses
SpecTag:fails::String#gsub with pattern and replacement doesn't freak out when replacing ^
SpecTag:fails::String#gsub with pattern and replacement supports /i for ignoring case
SpecTag:fails::String#gsub with pattern and replacement doesn't interpret regexp metacharacters if pattern is a string
SpecTag:fails::String#gsub with pattern and replacement replaces \\1 sequences with the regexp's corresponding capture
SpecTag:fails::String#gsub with pattern and replacement treats \\1 sequences without corresponding captures as empty strings
SpecTag:fails::String#gsub with pattern and replacement replaces \\& and \\0 with the complete match
SpecTag:fails::String#gsub with pattern and replacement replaces \\` with everything before the current match
SpecTag:fails::String#gsub with pattern and replacement replaces \\' with everything after the current match
SpecTag:fails::String#gsub with pattern and replacement replaces \\+ with the last paren that actually matched
SpecTag:fails::String#gsub with pattern and replacement treats \\+ as an empty string if there was no captures
SpecTag:fails::String#gsub with pattern and replacement maps \\\\ in replacement to \\
SpecTag:fails::String#gsub with pattern and replacement leaves unknown \\x escapes in replacement untouched
SpecTag:fails::String#gsub with pattern and replacement leaves \\ at the end of replacement untouched
SpecTag:fails::String#gsub with pattern and replacement taints the result if the original string or replacement is tainted
SpecTag:fails::String#gsub with pattern and replacement untrusts the result if the original string or replacement is untrusted
SpecTag:fails::String#gsub with pattern and replacement tries to convert pattern to a string using to_str
SpecTag:fails::String#gsub with pattern and replacement tries to convert replacement to a string using to_str
SpecTag:fails::String#gsub with pattern and replacement returns subclass instances when called on a subclass
SpecTag:fails::String#gsub with pattern and replacement sets $~ to MatchData of last match and nil when there's none
SpecTag:fails::String#gsub with pattern and Hash returns a copy of self with all occurrences of pattern replaced with the value of the corresponding hash key
SpecTag:fails::String#gsub with pattern and Hash ignores keys that don't correspond to matches
SpecTag:fails::String#gsub with pattern and Hash returns an empty string if the pattern matches but the hash specifies no replacements
SpecTag:fails::String#gsub with pattern and Hash ignores non-String keys
SpecTag:fails::String#gsub with pattern and Hash uses a key's value as many times as needed
SpecTag:fails::String#gsub with pattern and Hash uses the hash's default value for missing keys
SpecTag:fails::String#gsub with pattern and Hash coerces the hash values with #to_s
SpecTag:fails::String#gsub with pattern and Hash uses the hash's value set from default_proc for missing keys
SpecTag:fails::String#gsub with pattern and Hash sets $~ to MatchData of last match and nil when there's none for access from outside
SpecTag:fails::String#gsub with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value
SpecTag:fails::String#gsub with pattern and Hash untrusts the result if the original string is untrusted
SpecTag:fails::String#gsub with pattern and Hash untrusts the result if a hash value is untrusted
SpecTag:fails::String#gsub with pattern and Hash taints the result if the original string is tainted
SpecTag:fails::String#gsub with pattern and Hash taints the result if a hash value is tainted
SpecTag:fails::String#gsub! with pattern and Hash returns self with all occurrences of pattern replaced with the value of the corresponding hash key
SpecTag:fails::String#gsub! with pattern and Hash ignores keys that don't correspond to matches
SpecTag:fails::String#gsub! with pattern and Hash replaces self with an empty string if the pattern matches but the hash specifies no replacements
SpecTag:fails::String#gsub! with pattern and Hash ignores non-String keys
SpecTag:fails::String#gsub! with pattern and Hash uses a key's value as many times as needed
SpecTag:fails::String#gsub! with pattern and Hash uses the hash's default value for missing keys
SpecTag:fails::String#gsub! with pattern and Hash coerces the hash values with #to_s
SpecTag:fails::String#gsub! with pattern and Hash uses the hash's value set from default_proc for missing keys
SpecTag:fails::String#gsub! with pattern and Hash sets $~ to MatchData of last match and nil when there's none for access from outside
SpecTag:fails::String#gsub! with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value
SpecTag:fails::String#gsub! with pattern and Hash keeps untrusted state
SpecTag:fails::String#gsub! with pattern and Hash untrusts self if a hash value is untrusted
SpecTag:fails::String#gsub! with pattern and Hash keeps tainted state
SpecTag:fails::String#gsub! with pattern and Hash taints self if a hash value is tainted
SpecTag:fails::String#gsub with pattern and block returns a copy of self with all occurrences of pattern replaced with the block's return value
SpecTag:fails::String#gsub with pattern and block sets $~ for access from the block
SpecTag:fails::String#gsub with pattern and block restores $~ after leaving the block
SpecTag:fails::String#gsub with pattern and block sets $~ to MatchData of last match and nil when there's none for access from outside
SpecTag:fails::String#gsub with pattern and block doesn't interpolate special sequences like \\1 for the block's return value
SpecTag:fails::String#gsub with pattern and block converts the block's return value to a string using to_s
SpecTag:fails::String#gsub with pattern and block untrusts the result if the original string or replacement is untrusted
SpecTag:fails::String#gsub! with pattern and replacement taints self if replacement is tainted
SpecTag:fails::String#gsub! with pattern and replacement untrusts self if replacement is untrusted
SpecTag:fails::String#gsub! with pattern and replacement raises a RuntimeError when self is frozen
SpecTag:fails::String#gsub! with pattern and block modifies self in place and returns self
SpecTag:fails::String#gsub! with pattern and block taints self if block's result is tainted
SpecTag:fails::String#gsub! with pattern and block untrusts self if block's result is untrusted
SpecTag:fails::String#gsub! with pattern and block returns nil if no modifications were made
SpecTag:fails::String#gsub! with pattern and block raises a RuntimeError when self is frozen
