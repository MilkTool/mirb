SpecTag:fails::Array#pack with format 'V' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'V' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'V' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'V' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'V' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'V' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'V' returns an empty String if count is zero
SpecTag:fails::Array#pack with format 'V' raises a TypeError when passed true
SpecTag:fails::Array#pack with format 'V' raises a TypeError when passed false
SpecTag:fails::Array#pack with format 'V' returns an ASCII-8BIT string
SpecTag:fails::Array#pack with format 'V' raises a TypeError when the object does not respond to #to_int
SpecTag:fails::Array#pack with format 'V' raises a TypeError when passed a String
SpecTag:fails::Array#pack with format 'V' raises ArgumentError when the format modifier is '_'
SpecTag:fails::Array#pack with format 'V' raises ArgumentError when the format modifier is '!'
SpecTag:fails::Array#pack with format 'V' encodes the least significant 32 bits of a positive number
SpecTag:fails::Array#pack with format 'V' encodes the least significant 32 bits of a negative number
SpecTag:fails::Array#pack with format 'V' encodes a Float truncated as an Integer
SpecTag:fails::Array#pack with format 'V' calls #to_int to convert the pack argument to an Integer
SpecTag:fails::Array#pack with format 'V' encodes the number of array elements specified by the count modifier
SpecTag:fails::Array#pack with format 'V' encodes all remaining elements when passed the '*' modifier
SpecTag:fails::Array#pack with format 'V' ignores NULL bytes between directives
SpecTag:fails::Array#pack with format 'V' ignores spaces between directives
SpecTag:fails::Array#pack with format 'v' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'v' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'v' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'v' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'v' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'v' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'v' returns an empty String if count is zero
SpecTag:fails::Array#pack with format 'v' raises a TypeError when passed true
SpecTag:fails::Array#pack with format 'v' raises a TypeError when passed false
SpecTag:fails::Array#pack with format 'v' returns an ASCII-8BIT string
SpecTag:fails::Array#pack with format 'v' raises a TypeError when the object does not respond to #to_int
SpecTag:fails::Array#pack with format 'v' raises a TypeError when passed a String
SpecTag:fails::Array#pack with format 'v' raises ArgumentError when the format modifier is '_'
SpecTag:fails::Array#pack with format 'v' raises ArgumentError when the format modifier is '!'
SpecTag:fails::Array#pack with format 'v' encodes the least significant 16 bits of a positive number
SpecTag:fails::Array#pack with format 'v' encodes the least significant 16 bits of a negative number
SpecTag:fails::Array#pack with format 'v' encodes a Float truncated as an Integer
SpecTag:fails::Array#pack with format 'v' calls #to_int to convert the pack argument to an Integer
SpecTag:fails::Array#pack with format 'v' encodes the number of array elements specified by the count modifier
SpecTag:fails::Array#pack with format 'v' encodes all remaining elements when passed the '*' modifier
SpecTag:fails::Array#pack with format 'v' ignores NULL bytes between directives
SpecTag:fails::Array#pack with format 'v' ignores spaces between directives
FileTag:fails
