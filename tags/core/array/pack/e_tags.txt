SpecTag:fails::Array#pack with format 'E' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'E' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'E' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'E' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'E' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'E' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'E' raises ArgumentError when the format modifier is '_'
SpecTag:fails::Array#pack with format 'E' raises ArgumentError when the format modifier is '!'
SpecTag:fails::Array#pack with format 'E' returns an empty String if count is zero
SpecTag:fails::Array#pack with format 'E' raises a TypeError when passed true
SpecTag:fails::Array#pack with format 'E' raises a TypeError when passed false
SpecTag:fails::Array#pack with format 'E' returns an ASCII-8BIT string
SpecTag:fails::Array#pack with format 'E' raises a TypeError if a String does not represent a floating point number
SpecTag:fails::Array#pack with format 'E' raises a TypeError when the object does not respond to #to_f
SpecTag:fails::Array#pack with format 'E' encodes a positive Float
SpecTag:fails::Array#pack with format 'E' encodes a negative Float
SpecTag:fails::Array#pack with format 'E' converts an Integer to a Float
SpecTag:fails::Array#pack with format 'E' raises a TypeError if passed a String representation of a floating point number
SpecTag:fails::Array#pack with format 'E' encodes the number of array elements specified by the count modifier
SpecTag:fails::Array#pack with format 'E' encodes all remaining elements when passed the '*' modifier
SpecTag:fails::Array#pack with format 'E' ignores NULL bytes between directives
SpecTag:fails::Array#pack with format 'E' ignores spaces between directives
SpecTag:fails::Array#pack with format 'E' encodes positive Infinity
SpecTag:fails::Array#pack with format 'E' encodes negative Infinity
SpecTag:fails::Array#pack with format 'E' encodes NaN
SpecTag:fails::Array#pack with format 'E' encodes a positive Float outside the range of a single precision float
SpecTag:fails::Array#pack with format 'E' encodes a negative Float outside the range of a single precision float
SpecTag:fails::Array#pack with format 'e' raises a TypeError when passed nil
SpecTag:fails::Array#pack with format 'e' raises a TypeError when passed an Integer
SpecTag:fails::Array#pack with format 'e' ignores whitespace in the format string
SpecTag:fails::Array#pack with format 'e' calls #to_str to coerce the directives string
SpecTag:fails::Array#pack with format 'e' taints the output string if the format string is tainted
SpecTag:fails::Array#pack with format 'e' raises an ArgumentError if there are fewer elements than the format requires
SpecTag:fails::Array#pack with format 'e' raises ArgumentError when the format modifier is '_'
SpecTag:fails::Array#pack with format 'e' raises ArgumentError when the format modifier is '!'
SpecTag:fails::Array#pack with format 'e' returns an empty String if count is zero
SpecTag:fails::Array#pack with format 'e' raises a TypeError when passed true
SpecTag:fails::Array#pack with format 'e' raises a TypeError when passed false
SpecTag:fails::Array#pack with format 'e' returns an ASCII-8BIT string
SpecTag:fails::Array#pack with format 'e' raises a TypeError if a String does not represent a floating point number
SpecTag:fails::Array#pack with format 'e' raises a TypeError when the object does not respond to #to_f
SpecTag:fails::Array#pack with format 'e' encodes a positive Float
SpecTag:fails::Array#pack with format 'e' encodes a negative Float
SpecTag:fails::Array#pack with format 'e' converts an Integer to a Float
SpecTag:fails::Array#pack with format 'e' raises a TypeError if passed a String representation of a floating point number
SpecTag:fails::Array#pack with format 'e' encodes the number of array elements specified by the count modifier
SpecTag:fails::Array#pack with format 'e' encodes all remaining elements when passed the '*' modifier
SpecTag:fails::Array#pack with format 'e' ignores NULL bytes between directives
SpecTag:fails::Array#pack with format 'e' ignores spaces between directives
SpecTag:fails::Array#pack with format 'e' encodes positive Infinity
SpecTag:fails::Array#pack with format 'e' encodes negative Infinity
SpecTag:fails::Array#pack with format 'e' encodes NaN
SpecTag:fails::Array#pack with format 'e' encodes a positive Float outside the range of a single precision float
SpecTag:fails::Array#pack with format 'e' encodes a negative Float outside the range of a single precision float
