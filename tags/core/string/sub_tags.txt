SpecTag:fails::String#sub with pattern, replacement returns a copy of self with all occurrences of pattern replaced with replacement
SpecTag:fails::String#sub with pattern, replacement ignores a block if supplied
SpecTag:fails::String#sub with pattern, replacement supports \\G which matches at the beginning of the string
SpecTag:fails::String#sub with pattern, replacement supports /i for ignoring case
SpecTag:fails::String#sub with pattern, replacement doesn't interpret regexp metacharacters if pattern is a string
SpecTag:fails::String#sub with pattern, replacement replaces \\1 sequences with the regexp's corresponding capture
SpecTag:fails::String#sub with pattern, replacement treats \\1 sequences without corresponding captures as empty strings
SpecTag:fails::String#sub with pattern, replacement replaces \\& and \\0 with the complete match
SpecTag:fails::String#sub with pattern, replacement replaces \\` with everything before the current match
SpecTag:fails::String#sub with pattern, replacement replaces \\' with everything after the current match
SpecTag:fails::String#sub with pattern, replacement replaces \\\\\\+ with \\\\+
SpecTag:fails::String#sub with pattern, replacement replaces \\+ with the last paren that actually matched
SpecTag:fails::String#sub with pattern, replacement treats \\+ as an empty string if there was no captures
SpecTag:fails::String#sub with pattern, replacement maps \\\\ in replacement to \\
SpecTag:fails::String#sub with pattern, replacement leaves unknown \\x escapes in replacement untouched
SpecTag:fails::String#sub with pattern, replacement leaves \\ at the end of replacement untouched
SpecTag:fails::String#sub with pattern, replacement taints the result if the original string or replacement is tainted
SpecTag:fails::String#sub with pattern, replacement tries to convert pattern to a string using to_str
SpecTag:fails::String#sub with pattern, replacement raises a TypeError when pattern can't be converted to a string
SpecTag:fails::String#sub with pattern, replacement tries to convert replacement to a string using to_str
SpecTag:fails::String#sub with pattern, replacement raises a TypeError when replacement can't be converted to a string
SpecTag:fails::String#sub with pattern, replacement returns subclass instances when called on a subclass
SpecTag:fails::String#sub with pattern, replacement sets $~ to MatchData of match and nil when there's none
SpecTag:fails::String#sub with pattern, replacement replaces \\\0001 with \0001
SpecTag:fails::String#sub with pattern, replacement replaces \\\\1 with \\1
SpecTag:fails::String#sub with pattern, replacement replaces \\\\\0001 with \\
SpecTag:fails::String#sub with pattern and block returns a copy of self with the first occurrences of pattern replaced with the block's return value
SpecTag:fails::String#sub with pattern and block sets $~ for access from the block
SpecTag:fails::String#sub with pattern and block restores $~ after leaving the block
SpecTag:fails::String#sub with pattern and block sets $~ to MatchData of last match and nil when there's none for access from outside
SpecTag:fails::String#sub with pattern and block doesn't raise a RuntimeError if the string is modified while substituting
SpecTag:fails::String#sub with pattern and block doesn't interpolate special sequences like \\1 for the block's return value
SpecTag:fails::String#sub with pattern and block converts the block's return value to a string using to_s
SpecTag:fails::String#sub with pattern and block taints the result if the original string or replacement is tainted
SpecTag:fails::String#sub! with pattern, replacement modifies self in place and returns self
SpecTag:fails::String#sub! with pattern, replacement taints self if replacement is tainted
SpecTag:fails::String#sub! with pattern, replacement returns nil if no modifications were made
SpecTag:fails::String#sub! with pattern, replacement raises a RuntimeError when self is frozen
SpecTag:fails::String#sub! with pattern and block modifies self in place and returns self
SpecTag:fails::String#sub! with pattern and block sets $~ for access from the block
SpecTag:fails::String#sub! with pattern and block taints self if block's result is tainted
SpecTag:fails::String#sub! with pattern and block returns nil if no modifications were made
SpecTag:fails::String#sub! with pattern and block raises a RuntimeError if the string is modified while substituting
SpecTag:fails::String#sub! with pattern and block raises a RuntimeError when self is frozen
