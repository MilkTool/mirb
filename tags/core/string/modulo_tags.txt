SpecTag:fails::String#% formats multiple expressions
SpecTag:fails::String#% formats expressions mid string
SpecTag:fails::String#% formats %% into %
SpecTag:fails::String#% raises an error if single % appears anywhere else
SpecTag:fails::String#% raises an error if NULL or \\n appear anywhere else in the format string
SpecTag:fails::String#% ignores unused arguments when $DEBUG is false
SpecTag:fails::String#% raises an ArgumentError for unused arguments when $DEBUG is true
SpecTag:fails::String#% always allows unused arguments when positional argument style is used
SpecTag:fails::String#% replaces trailing absolute argument specifier without type with percent sign
SpecTag:fails::String#% raises an ArgumentError when given invalid argument specifiers
SpecTag:fails::String#% raises an ArgumentError when multiple positional argument tokens are given for one format specifier
SpecTag:fails::String#% respects positional arguments and precision tokens given for one format specifier
SpecTag:fails::String#% allows more than one digit of position
SpecTag:fails::String#% raises an ArgumentError when multiple width star tokens are given for one format specifier
SpecTag:fails::String#% raises an ArgumentError when a width star token is seen after a width token
SpecTag:fails::String#% raises an ArgumentError when multiple precision tokens are given
SpecTag:fails::String#% raises an ArgumentError when there are less arguments than format specifiers
SpecTag:fails::String#% raises an ArgumentError when absolute and relative argument numbers are mixed
SpecTag:fails::String#% allows reuse of the one argument multiple via absolute argument numbers
SpecTag:fails::String#% always interprets an array argument as a list of argument parameters
SpecTag:fails::String#% always interprets an array subclass argument as a list of argument parameters
SpecTag:fails::String#% allows positional arguments for width star and precision star arguments
SpecTag:fails::String#% allows negative width to imply '-' flag
SpecTag:fails::String#% ignores negative precision
SpecTag:fails::String#% allows a star to take an argument number to use as the width
SpecTag:fails::String#% calls to_int on width star and precision star tokens
SpecTag:fails::String#% tries to convert the argument to Array by calling #to_ary
SpecTag:fails::String#% always taints the result when the format string is tainted
SpecTag:fails::String#% supports binary formats using %b for positive numbers
SpecTag:fails::String#% supports binary formats using %b for negative numbers
SpecTag:fails::String#% supports binary formats using %B with same behaviour as %b except for using 0B instead of 0b for #
SpecTag:fails::String#% supports character formats using %c
SpecTag:fails::String#% calls #to_ary on argument for %c formats
SpecTag:fails::String#% calls #to_int on argument for %c formats, if the argument does not respond to #to_ary
SpecTag:fails::String#% supports integer formats using %d
SpecTag:fails::String#% supports negative integers using %d
SpecTag:fails::String#% supports negative integers using %d, giving priority to `-`
SpecTag:fails::String#% supports integer formats using %i
SpecTag:fails::String#% supports negative integers using %i
SpecTag:fails::String#% supports negative integers using %i, giving priority to `-`
SpecTag:fails::String#% supports float formats using %e
SpecTag:fails::String#% supports float formats using %E
SpecTag:fails::String#% pads with spaces for %E with Inf, -Inf, and NaN
SpecTag:fails::String#% supports float formats using %f
SpecTag:fails::String#% supports float formats using %g
SpecTag:fails::String#% supports float formats using %G
SpecTag:fails::String#% supports octal formats using %o for positive numbers
SpecTag:fails::String#% supports octal formats using %o for negative numbers
SpecTag:fails::String#% supports inspect formats using %p
SpecTag:fails::String#% calls inspect on arguments for %p format
SpecTag:fails::String#% taints result for %p when argument.inspect is tainted
SpecTag:fails::String#% supports string formats using %s
SpecTag:fails::String#% respects a space padding request not as part of the width
SpecTag:fails::String#% calls to_s on non-String arguments for %s format
SpecTag:fails::String#% taints result for %s when argument is tainted
SpecTag:fails::String#% raises an ArgumentError for huge precisions for %s
SpecTag:fails::String#% supports unsigned formats using %u
SpecTag:fails::String#% formats negative values with a leading sign using %u
SpecTag:fails::String#% supports negative bignums with %u or %d
SpecTag:fails::String#% supports hex formats using %x for positive numbers
SpecTag:fails::String#% supports hex formats using %x for negative numbers
SpecTag:fails::String#% supports hex formats using %X for positive numbers
SpecTag:fails::String#% supports hex formats using %X for negative numbers
SpecTag:fails::String#% formats zero without prefix using %#x
SpecTag:fails::String#% formats zero without prefix using %#X
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %b argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %b when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %d argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %d when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %i argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %i when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %o argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %o when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %u argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %u when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %x argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %x when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Integer for %X argument, if it does not respond to #to_ary
SpecTag:fails::String#% doesn't taint the result for %X when argument is tainted
SpecTag:fails::String#% tries to convert the passed argument to an Array using #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %e arguments, when the passed argument does not respond to #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %e arguments, when the passed argument is hexadecimal string
SpecTag:fails::String#% doesn't taint the result for %e when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Float for %E arguments, when the passed argument does not respond to #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %E arguments, when the passed argument is hexadecimal string
SpecTag:fails::String#% doesn't taint the result for %E when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Float for %f arguments, when the passed argument does not respond to #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %f arguments, when the passed argument is hexadecimal string
SpecTag:fails::String#% doesn't taint the result for %f when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Float for %g arguments, when the passed argument does not respond to #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %g arguments, when the passed argument is hexadecimal string
SpecTag:fails::String#% doesn't taint the result for %g when argument is tainted
SpecTag:fails::String#% behaves as if calling Kernel#Float for %G arguments, when the passed argument does not respond to #to_ary
SpecTag:fails::String#% behaves as if calling Kernel#Float for %G arguments, when the passed argument is hexadecimal string
SpecTag:fails::String#% doesn't taint the result for %G when argument is tainted
