Statements <- Sep*, Statement, (Sep+, Statement)*, Sep*

Statement <- Conditional

Conditional <- TernaryIf, {("if" | "unless"), Statement}

Expression <- TernaryIf

TernaryIf <- Arithmetic, {"?", TernaryIf, ":", TernaryIf}

Arithmetic <- Term, {TermOp, Term}

TermOp <- "+"
	| "-"

Term <- LookupChain, (FactorOp, LookupChain)*

FactorOp <- "*"
	| "/"

LookupChain <- Factor, Lookup(Call)*, {Lookup(Identifier), AssignTail}

Lookup(Type) <- "::", Type
	| ".", Type
	| "[", Expression, "]"

Factor <- Number
	| Variable
	| Call
	| Assigment
	| If
	| Case
	| Unless
	| Class
	| Method
	| "(", Expressions, ")"

Class <- "class", Identifier, Sep, Statements, "end"

Method <- "def", Identifier, {"(", Arguments, ")"}, Sep, Statements, "end"

Case <- "case", (When+ {Else} | Else), "end"

When <- "when", Expression, ThenSep

If <- "if", Expression, ThenSep, Statements, {"elsif", Statements}*, {Else}, "end"

Else <- "else", Statements

Unless <- "unless", Expression, ThenSep, Statements, "end"

Assigment <- Variable, AssignTail

AssignTail <- AssignOp, Expression

AssignOp <- "="
	| "+="
	| "-="
	| "*="
	| "/="

Call <- Identifier, {Arguments | "(", Arguments, ")"}

Arguments <- Expression, (",", Expression)*

Variable <- Identifier

ThenSep <- "then"
	| Sep
	| ":"

Sep <- NewLine
	| ";"

Identifier <- Char, (Char | Digit)*

Char <- "_"
	| "a"-"z"
	| "A"-"Z"

Number <- Digit+
Digit <- "0"-"9"
NewLine <- "\n" | "\r" | "\r\n"